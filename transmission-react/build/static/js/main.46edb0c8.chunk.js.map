{"version":3,"sources":["services/api.js","components/PageCreate.js","components/UrlKeyForm.js","containers/Home.js","components/PageWebSocket.js","containers/SharedBrowser.js","containers/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["BACKEND_DOMAIN","process","api","createPage","url_key","content","page","fetch","method","headers","Accept","body","JSON","stringify","then","resp","json","getSharedPage","console","log","getUrlKeyList","updatePage","deletePage","page_id","PageCreate","props","to","className","UrlKeyForm","useState","key","setKey","validKey","setValidKey","Form","onSubmit","e","preventDefault","stopPropagation","target","value","urlKeyList","indexOf","Control","type","placeholder","onChange","Feedback","Home","keyList","setKeyList","useEffect","generateKey","getUrls","characters","i","Math","floor","random","length","PageWebSocket","cableApp","getPageData","updateApp","useParams","cable","subscriptions","create","channel","received","SharedBrowser","text","setText","Label","as","rows","catch","err","NavBar","App","exact","path","render","routeProps","Boolean","window","location","hostname","match","CableApp","actionCable","createConsumer","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.46edb0c8.chunk.js","sourcesContent":["const BACKEND_DOMAIN = process.env.REACT_APP_TRANSMISSION_BACKEND_DOMAIN;\n\nconst headers = () => {\n  return {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  };\n};\n\nconst createPage = (url_key, content) => {\n    const page = { page: { url_key, content } }\n    return fetch(`${BACKEND_DOMAIN}/pages`, {\n        method: \"POST\",\n        headers: headers(),\n        body: JSON.stringify(page)\n    }).then(resp => resp.json());\n};\n\nconst getSharedPage = (url_key) => {\n  console.log(\"GETSHAREDPAGE METHOD RUN\")\n  return fetch(`${BACKEND_DOMAIN}/k/${url_key}`, {\n    headers: headers()\n  }).then(resp => resp.json());\n};\n\nconst getUrlKeyList = () => {\n  return fetch(`${BACKEND_DOMAIN}/pages`, {\n    headers: headers()\n  }).then(resp => resp.json());\n};\n\nconst updatePage = (url_key, content) => {\n  console.log(\"UPDATEDPAGE METHOD RUN\")\n  const page = { page: { content } }\n  console.log(url_key)\n  return fetch(`${BACKEND_DOMAIN}/k/${url_key}`, {\n    method: \"PUT\",\n    headers: headers(),\n    body: JSON.stringify(page)\n  }).then(resp => resp.json());\n};\n\nconst deletePage = page_id => {\n  return fetch(`${BACKEND_DOMAIN}/pages/${page_id}`, {\n    method: \"DELETE\",\n    headers: headers(),\n  }).then(resp => resp.json());\n};\n\n\nexport const api = {\n    createPage,\n    getSharedPage,\n    getUrlKeyList,\n    updatePage,\n    deletePage,\n};","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nconst PageCreate = (props) => {\n\n    return (\n        <Link to={props.url_key} className=\"btn btn-dark\"> Create a Page </Link>\n    )\n}\n\nexport default PageCreate","import React, { useState } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport { Link } from 'react-router-dom';\n\nconst UrlKeyForm = (props) => {\n\n    const [key, setKey] = useState('');\n    const [validKey, setValidKey] = useState(false);\n\n    const handleKeyChange = e => {\n        setKey(e.target.value);\n        (props.urlKeyList.indexOf(e.target.value) !== -1) ? setValidKey(true) : setValidKey(false)\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        setKey(e.target.value);\n        (props.urlKeyList.indexOf(e.target.value) !== -1) ? setValidKey(true) : setValidKey(false)\n    }\n\n    const validateKey = () => {\n        if (key === '') {\n            return ''\n        } else if (validKey) {\n            return 'is-valid'\n        } else if (!validKey) {\n            return 'is-invalid'\n        }\n    }\n\n    return (\n        <Form className=\"url-form\" onSubmit={handleSubmit}>\n            <Form.Control \n                type=\"text\" \n                placeholder=\"Type your 4-character key...\" \n                className={validateKey()}\n                onChange={handleKeyChange}\n                value={key}\n                />\n            {validKey ?\n            null\n            :\n            <Form.Control.Feedback type=\"invalid\">\n              Please enter correct Url Key\n            </Form.Control.Feedback>\n            }\n            {validKey ?\n            <Link to={key} className=\"btn btn-success go-url\"> Go </Link>\n            :\n            null\n            }\n        </Form>\n    )\n}\n\nexport default UrlKeyForm","import React, { useState, useEffect } from 'react';\nimport { api } from '../services/api';\nimport PageCreate from '../components/PageCreate';\nimport UrlKeyForm from '../components/UrlKeyForm'\n\nconst Home = () => {\n    const [key, setKey] = useState('');\n    const [keyList, setKeyList] = useState([]);\n\n    useEffect(() => {\n        generateKey();\n        getUrls();\n    }, []);\n\n    const generateKey = () => {\n        const characters = [ \n            \"A\",  \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \n            \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n            \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\",\n            \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \n            \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\n        ]\n        let url_key = '';\n        for (let i = 0; i <= 3; i++) {\n            let k = characters[Math.floor(Math.random()*characters.length)]\n            url_key += k;\n        }\n        api.createPage(url_key, \"\").then( resp => setKey(resp.page.url_key))\n        //TO DO: check if url is unique, if not generate new url_key\n        //OR: comes up with new way of generating unrepeat url_key\n        return key\n    }\n\n    const getUrls = () => {\n        api.getUrlKeyList().then( resp => setKeyList(resp))\n    }\n\n    return (\n        \n        <div className=\"homepage\">\n            <h1>Share text in real-time</h1>\n            <br/><br/>\n            <p>An online tool for people to quickly share texts between browsers with the same URL</p>\n            <p>Click below button to start</p>\n            {(key === \"\") ? \n            null \n            : \n            <PageCreate url_key={key}/>\n            }\n            <br/><br/>\n            <hr/>\n            <br/><br/>\n            Or enter your URL key to go to an existing page\n            <br/><br/>\n            <UrlKeyForm urlKeyList={keyList}/>\n        </div>\n    )\n}\n\nexport default Home","import React, { useEffect } from \"react\";\nimport { useParams } from 'react-router-dom';\n\nconst PageWebSocket = (props) => {\n    const { cableApp, getPageData, updateApp} = props;\n    const { url_key } = useParams();\n\n    useEffect(() => {\n        props.cableApp.page = \n        props.cableApp.cable.subscriptions.create({\n            channel: 'PagesChannel',\n            page: url_key\n        },\n        {\n            received: updatePage => {\n                props.updateApp(updatePage)\n            }\n        }\n        );\n      }, []);\n\n    return (\n        <div></div>\n    )\n}\n\nexport default PageWebSocket","import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form'\nimport { api } from '../services/api';\nimport { useParams } from 'react-router-dom';\nimport PageWebSocket from '../components/PageWebSocket';\n\nconst SharedBrowser = (props) => {\n\n    const [text, setText] = useState('');\n    const { url_key } = useParams();\n    const { cableApp } = props;\n\n    useEffect(() => {\n        api.getSharedPage(url_key).then( resp => setText(resp.content));\n      }, []); \n\n    const handleTextChange = e => {\n        api.updatePage(url_key, e.target.value)\n        .then( resp => setText(resp.content))\n        .catch( err => console.log(\"catch err here\", err));\n        setText(e.target.value);\n      };\n\n    return (\n        <Form className=\"shared-text\">\n            <Form.Label><h4>Key: {url_key}</h4></Form.Label>\n            <Form.Control \n                as=\"textarea\" \n                rows=\"30\" \n                placeholder=\"Write or paste text here. Anyone you share with will see your text as it is typed...\"\n                onChange={handleTextChange}\n                value={text}\n            />\n            <PageWebSocket\n                cableApp={props.cableApp}\n                getPageData={api.getSharedPage}\n                updatePage={api.updatePage}\n            />\n        </Form>\n    )\n}\n\nexport default SharedBrowser","import React from \"react\";\n\n\nconst NavBar = () => {\n\n    return (\n        <nav className=\"navbar\">\n            Transmission\n        </nav>\n    )\n}\n\nexport default NavBar","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './containers/Home';\nimport SharedBrowser from './containers/SharedBrowser';\nimport NavBar from './containers/NavBar';\n\n\nconst App = (props) => {\n  const { cableApp } = props;\n  console.log(props.cableApp);\n  return (\n      <Router>\n        <NavBar/>\n        <Route exact path='/' render={(routeProps) => <Home {...routeProps} />} />\n        <Route exact path='/:url_key' render={(routeProps) => <SharedBrowser {...routeProps} cableApp={props.cableApp} />} />\n      </Router>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport actionCable from 'actioncable';\n\nconst CableApp = {};\nCableApp.cable = actionCable.createConsumer('ws//localhost:3000/cable')\n\nReactDOM.render(\n  <React.StrictMode>\n    <App cableApp={CableApp}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}